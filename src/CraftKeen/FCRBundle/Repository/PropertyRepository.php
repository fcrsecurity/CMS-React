<?php

namespace CraftKeen\FCRBundle\Repository;

use CraftKeen\FCRBundle\Entity\Property;
use CraftKeen\FCRBundle\Entity\PropertyVacancy;
use CraftKeen\FCRBundle\Entity\ActiveProvince;
use CraftKeen\CMS\AdminBundle\Entity\Language;
use CraftKeen\FCRBundle\Model\PropertySearchModel;

/**
 * PropertyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PropertyRepository extends TranslatableEntityRepository
{

    /**
     * Remove all data from table. Temp. Neede for Initial Import.
     *
     * @param bool $translationOnly
     */
    public function truncate($translationOnly = false)
    {
        $cmd = $this->getEntityManager()->getClassMetadata(Property::class);
        $connection = $this->getEntityManager()->getConnection();
        $connection->beginTransaction();

        try {
            if ($translationOnly) {
                $connection->query('DELETE FROM ' . $cmd->getTableName() . ' WHERE land_parent is not null;');
            } else {
                $connection->query('DELETE FROM ' . $cmd->getTableName() . ' WHERE id > 0;');
            }
            $connection->commit();
        } catch (\Exception $e) {
            $connection->rollback();
        }
    }

    /**
     * Find Active Properties to Display on Leasing Map
     *
     * @param Language $language
     * @return array
     */
    public function findPropertiesMap(Language $language)
    {
        $data = array();
        $properties = $this->findBy(['isHidden' => 0, 'lang' => $language]);
        $cities = $this->getCityListFromProperties($properties);

        foreach ($cities as $key => $city) {
            /** @var  Property $property */
            foreach ($properties as $k => $property) {
                if (!is_null($property->getDetails()) && $city == $property->getDetails()->getGeoCity()) {
                    $data[$city][] = array(
                        'id' => $property->getId(),
                        'code' => $property->getCode(),
                        'img' => $property->getThumbnail(),
                        'place_title' => $property->getParentName(),
                        'address' => $property->getDetails()->getGeoAddress1() . ' ' . $property->getDetails()->getGeoAddress2() . ', ' . $property->getDetails()->getGeoCity() . ', ' . $property->getDetails()->getGeoPostal(),
                        'sq' => $property->getDetails()->getSqft(),
                        'geo_intersetion' => $property->getDetails()->getGeoIntersetion(),
                        'latitude' => $property->getDetails()->getGeoLat(),
                        'longitude' => $property->getDetails()->getGeoLng(),
                        'province' => $property->getDetails()->getGeoProvince()
                    );
                }
            }
        }

        return $data;
    }

    /**
     * Find Active Cities by Provice to Display on Leasing Map
     *
     * @param Language $language
     * @return array
     */
    public function findCitiesMap(Language $language)
    {
        $data = array();

        $properties = $this->findBy(['isHidden' => 0, 'lang' => $language]);
        $provinces = $this->getEntityManager()->getRepository(ActiveProvince::class)->findAll();
        $cities = $this->getCityListFromProperties($properties);

        $pCodes = array();
        /** @var  ActiveProvince $province */
        foreach ($provinces as $key => $province) {
            if (!in_array($province->getProvinceCode(), $pCodes)) {
                $pCodes[$province->getProvinceCode()] = '';
            }
        }

        foreach ($cities as $key => $city) {
            $count = 1;
            /** @var  Property $property */
            foreach ($properties as $k => $property) {
                if (!is_null($property->getDetails()) && ($city == $property->getDetails()->getGeoCity())) {
                    $data[$key] = array(
                        'places' => $count++,
                        'city' => $city,
                        'lat' => $property->getDetails()->getGeoLat(),
                        'lng' => $property->getDetails()->getGeoLng(),
                        'zoom' => 10,
                        'place' => $property->getDetails()->getGeoProvince(),
                        'provinceCluster' => 0,
                        'citiesCluster' => 1,
                    );
                    $pCodes[$property->getDetails()->getGeoProvince()] = (int)$pCodes[$property->getDetails()->getGeoProvince()]++;
                }
            }
        }
        foreach ($provinces as $key => $province) {
            array_push($data, array(
                'places' => $pCodes[$province->getProvinceCode()],
                'city' => '',
                'lat' => $province->getMarkerLat(),
                'lng' => $province->getMarkerLng(),
                'zoom' => 0,
                'place' => $province->getProvinceCode(),
                'provinceCluster' => 1,
                'citiesCluster' => 0,
            ));
        }

        return $data;
    }


    /**
     * Find Active Properties Listing with Steps
     *
     * @param Language $language
     * @param string $province
     * @param int $offset
     * @param int $limit
     * @param null $filter
     * @param bool $nolimit
     * @param bool $js
     * @return array
     */
    public function findPropertiesListing(Language $language, $province = 'AB', $offset = 0, $limit = 12, $filter = null, $nolimit = false, $js = false)
    {
        $data = [];
        $noMore = false;

        $qb = $this->createQueryBuilder('p')
            ->join('p.details', 'd')
            ->where('d.property = p.id')
            ->andWhere('d.geoProvince = :province')
            ->andWhere('p.isHidden = 0')
            ->andWhere('p.status = :status')
            ->setParameter(':status', 'live')
            ->andWhere('p.lang = :lang')
            ->setParameter(':province', $province)
            ->setParameter(':lang', $language);

        // TODO: Change filtering to be more nice.
        $filterNames = [
            'grocery_anchored',
            'urban_retail',
            'office_space',
            'under_development'
        ];
        if (null !== $filter && strlen($filter) > 0 && in_array($filter, $filterNames)) {
            // Generate Filter name
            $filerName = 'isFilter' . str_replace(' ', '', ucwords(str_replace('_', ' ', strtolower($filter))));
            $qb->join('p.filters', 'f')
                ->andWhere('f.' . $filerName . ' = true');
        }

//		if ($random) {
//			// TODO: Implement if needed. I don't know why we used this field.
//		}

        // Add Order
        $qb->orderBy('p.sortOrder', 'ASC');

        if ($nolimit) {
            $query = $qb->getQuery();
        } else {
            $qb->setFirstResult($offset)
                ->setMaxResults($limit);

            //$nextOffset = $offset + $limit;
            $nextQb = $qb;
            $nextQb
                ->setFirstResult($offset)
                ->setMaxResults($limit);

            $nextQuery = $nextQb->getQuery();
            if (!$nextQuery->getResult()) {
                $noMore = true;
            }
            $query = $qb->getQuery();
        }

        $properties = $query->getResult();
        // TODO: Organize Twig and JS
        if (!$js) {
            return $properties;
        } else {
            /** @var  Property $property */
            foreach ($properties as $key => $property) {
                $data[] = array(
                    'id' => $property->getId(),
                    'code' => $property->getCode(),
                    'thumbnail' => $property->getThumbnail(),
                    'childName' => $property->getChildName(),
                    'parentName' => $property->getParentName(),
                    'geoAddress1' => $property->getDetails()->getGeoAddress1(),
                    'geoAddress2' => $property->getDetails()->getGeoAddress2(),
                    'geoCity' => !is_null($property->getDetails()) ? $property->getDetails()->getGeoCity() : null,
                    'geoProvince' => $property->getDetails()->getGeoProvince(),
                    'lat' => $property->getDetails()->getGeoLat(),
                    'lng' => $property->getDetails()->getGeoLng(),
                    'sqft' => $property->getDetails()->getSqft(),
                    // TODO: update to more flexible filters
                    "filter_grocery_anchored" => $property->getFilters()->getIsFilterGroceryAnchored(),
                    "filter_urban_retail" => $property->getFilters()->getIsFilterUrbanRetail(),
                    "filter_office_space" => $property->getFilters()->getIsFilterOfficeSpace(),
                    "filter_under_development" => $property->getFilters()->getIsFilterUnderDevelopment(),
                );
            }

            $data['no_more'] = $noMore;

            return $data;
        }
    }

    /**
     * @param Language $language
     * @param $keyword
     * @return array|\Doctrine\ORM\Query
     */
    public function filterByKeyword(Language $language, $keyword)
    {
        if (null == $keyword) {
            return $this->findBy([
                'lang' => $language,
                'isHidden' => false
            ]);
        }

        $qb = $this->createQueryBuilder('p');

        $qb->join('p.details', 'd')
            ->where('p.code = :keyword')
            ->orWhere($qb->expr()->like('p.parentName', ':likeKeyword'))
            ->orWhere($qb->expr()->like('p.childName', ':likeKeyword'))
            ->orWhere('d.geoCity LIKE :keyword')
            ->orWhere('d.geoProvince LIKE :keyword')
            ->orWhere($qb->expr()->like('d.geoAddress1', ':likeKeyword'))
            ->andWhere('p.isHidden = 0')
            ->andWhere('p.lang = :lang')
            ->andWhere('p.status = :status')
            ->setParameter(':status', 'live')
            ->setParameter(':lang', $language)
            ->setParameter(':keyword', $keyword)
            ->setParameter('likeKeyword', '%' . $keyword . '%');
        return $qb->getQuery();
    }


    /**
     * Filter Search result by form
     *
     * @param Language $language
     * @param PropertySearchModel $filter
     * @return array|\Doctrine\ORM\Query
     */
    public function filterResults(Language $language, PropertySearchModel $filter)
    {
        if ($filter->getKeyword() && strlen($filter->getKeyword()) > 0) {
            // Implement Keyword search
            return $this->filterByKeyword($language, $filter->getKeyword());
        }

        $qb = $this->createQueryBuilder('p')
            ->join('p.details', 'd')
            ->where('p.isHidden = 0')
            ->andWhere('p.lang = :lang')
            ->andWhere('p.status = :status')
            ->setParameter(':lang', $language)
            ->setParameter(':status', 'live');

        if ($filter->getCity() && 'null' != $filter->getCity()) {
            $qb->andWhere('d.geoCity = :geoCity')
                ->setParameter(':geoCity', $filter->getCity());
        }

        $min = 1;
        $max = 1000000;
        if ($filter->getSqftMin() && (int)$filter->getSqftMin() > 0) {
            $min = (int)$filter->getSqftMin();
        }
        if ($filter->getSqftMax() && (int)$filter->getSqftMax() > 0 && $min < (int)$filter->getSqftMax()) {
            $max = (int)$filter->getSqftMax();
        }

        $qbVacant = $this->_em->createQueryBuilder();
        $qbVacant
            //->select('pa.id')
            ->select('lpv')
            ->from(PropertyVacancy::class, 'lpv')
            //->join('lpv.property', 'pa')
            ->where('lpv.vacantSqft BETWEEN :min AND :max')
            ->setParameter(':min', $min)
            ->setParameter(':max', $max)
        ;
        $vacancies = $qbVacant->getQuery()->getResult();
        $withVacancies = [];
        if (count($vacancies) > 0) {
            /** @var PropertyVacancy $vacancy */
            foreach ($vacancies as $vacancy) {
                if (null !== $vacancy->getProperty() &&
                    !in_array($vacancy->getProperty()->getId(), $withVacancies)) {
                    $withVacancies[] = $vacancy->getProperty()->getId();
                }
            }
        }

        $qb->andWhere($qb->expr()->orX(
            $qb->expr()->in('p.id', $withVacancies),
            $qb->expr()->between('d.sqft', $min, $max)
        ));

        if ($filter->getCategory() && 'null' != $filter->getCategory() && 'all_default' != $filter->getCategory()) {
            $filerName = 'isFilter' . str_replace(' ', '', ucwords(str_replace('_', ' ', strtolower($filter->getCategory()))));
            $qb->join('p.filters', 'f')
                ->andWhere('f.' . $filerName . ' = true');
        }
        return $qb->getQuery();
    }


    /**
     * Get City List from Properties
     *
     * @param array $properties
     * @param bool $generateKeys
     * @return array
     */
    public function getCityListFromProperties($properties, $generateKeys = false)
    {
        $cities = array();
        foreach ($properties as $key => $property) {
            if (!is_null($property->getDetails()) && strlen($property->getDetails()->getGeoCity()) > 0 && !in_array($property->getDetails()->getGeoCity(), $cities)) {
                if ($generateKeys) {
                    $cities[$property->getDetails()->getGeoCity()] = str_replace([' '], '_', strtolower($property->getDetails()->getGeoCity()));
                } else {
                    $cities[] = $property->getDetails()->getGeoCity();
                }
            }
        }
        uksort($cities, array($this, "cmpCity"));
        return $cities;
    }

    /**
     * Key Sensitive search callback
     *
     * @param string $a
     * @param string $b
     * @return int
     */
    private function cmpCity($a, $b)
    {
        if ($a == $b) {
            return 0;
        }
        return ($a < $b) ? -1 : 1;
    }

    /**
     * Delete all copies of property
     *
     * @param Property $property
     * @return mixed
     */
    public function deleteCopiesOfProperty(Property $property)
    {
        $query = $this->createQueryBuilder('p');
        return $query->delete()
            ->where('p.copyOf = :propertyId')
            ->setParameter("propertyId", $property->getId())
            ->getQuery()
            ->execute();
    }

}
